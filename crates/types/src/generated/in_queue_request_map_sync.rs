// Generated by Molecule 0.7.2

use super::blockchain::*;
use super::godwoken::*;
use super::store::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct SyncMessage(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SyncMessage {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SyncMessage {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SyncMessage {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl ::core::default::Default for SyncMessage {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 64, 0, 0, 0, 12, 0, 0, 0, 60, 0, 0, 0, 48, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0,
            0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        SyncMessage::new_unchecked(v.into())
    }
}
impl SyncMessage {
    pub const ITEMS_COUNT: usize = 3;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> SyncMessageUnion {
        let inner = self.0.slice(molecule::NUMBER_SIZE..);
        match self.item_id() {
            0 => L2Transaction::new_unchecked(inner).into(),
            1 => WithdrawalRequestExtra::new_unchecked(inner).into(),
            2 => RemoveRequest::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
    pub fn as_reader<'r>(&'r self) -> SyncMessageReader<'r> {
        SyncMessageReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SyncMessage {
    type Builder = SyncMessageBuilder;
    const NAME: &'static str = "SyncMessage";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SyncMessage(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SyncMessageReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SyncMessageReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set(self.to_enum())
    }
}
#[derive(Clone, Copy)]
pub struct SyncMessageReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SyncMessageReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SyncMessageReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SyncMessageReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl<'r> SyncMessageReader<'r> {
    pub const ITEMS_COUNT: usize = 3;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> SyncMessageUnionReader<'r> {
        let inner = &self.as_slice()[molecule::NUMBER_SIZE..];
        match self.item_id() {
            0 => L2TransactionReader::new_unchecked(inner).into(),
            1 => WithdrawalRequestExtraReader::new_unchecked(inner).into(),
            2 => RemoveRequestReader::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for SyncMessageReader<'r> {
    type Entity = SyncMessage;
    const NAME: &'static str = "SyncMessageReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SyncMessageReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_id = molecule::unpack_number(slice);
        let inner_slice = &slice[molecule::NUMBER_SIZE..];
        match item_id {
            0 => L2TransactionReader::verify(inner_slice, compatible),
            1 => WithdrawalRequestExtraReader::verify(inner_slice, compatible),
            2 => RemoveRequestReader::verify(inner_slice, compatible),
            _ => ve!(Self, UnknownItem, Self::ITEMS_COUNT, item_id),
        }?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SyncMessageBuilder(pub(crate) SyncMessageUnion);
impl SyncMessageBuilder {
    pub const ITEMS_COUNT: usize = 3;
    pub fn set<I>(mut self, v: I) -> Self
    where
        I: ::core::convert::Into<SyncMessageUnion>,
    {
        self.0 = v.into();
        self
    }
}
impl molecule::prelude::Builder for SyncMessageBuilder {
    type Entity = SyncMessage;
    const NAME: &'static str = "SyncMessageBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + self.0.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.item_id()))?;
        writer.write_all(self.0.as_slice())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SyncMessage::new_unchecked(inner.into())
    }
}
#[derive(Debug, Clone)]
pub enum SyncMessageUnion {
    L2Transaction(L2Transaction),
    WithdrawalRequestExtra(WithdrawalRequestExtra),
    RemoveRequest(RemoveRequest),
}
#[derive(Debug, Clone, Copy)]
pub enum SyncMessageUnionReader<'r> {
    L2Transaction(L2TransactionReader<'r>),
    WithdrawalRequestExtra(WithdrawalRequestExtraReader<'r>),
    RemoveRequest(RemoveRequestReader<'r>),
}
impl ::core::default::Default for SyncMessageUnion {
    fn default() -> Self {
        SyncMessageUnion::L2Transaction(::core::default::Default::default())
    }
}
impl ::core::fmt::Display for SyncMessageUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            SyncMessageUnion::L2Transaction(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, L2Transaction::NAME, item)
            }
            SyncMessageUnion::WithdrawalRequestExtra(ref item) => {
                write!(
                    f,
                    "{}::{}({})",
                    Self::NAME,
                    WithdrawalRequestExtra::NAME,
                    item
                )
            }
            SyncMessageUnion::RemoveRequest(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, RemoveRequest::NAME, item)
            }
        }
    }
}
impl<'r> ::core::fmt::Display for SyncMessageUnionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            SyncMessageUnionReader::L2Transaction(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, L2Transaction::NAME, item)
            }
            SyncMessageUnionReader::WithdrawalRequestExtra(ref item) => {
                write!(
                    f,
                    "{}::{}({})",
                    Self::NAME,
                    WithdrawalRequestExtra::NAME,
                    item
                )
            }
            SyncMessageUnionReader::RemoveRequest(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, RemoveRequest::NAME, item)
            }
        }
    }
}
impl SyncMessageUnion {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            SyncMessageUnion::L2Transaction(ref item) => write!(f, "{}", item),
            SyncMessageUnion::WithdrawalRequestExtra(ref item) => write!(f, "{}", item),
            SyncMessageUnion::RemoveRequest(ref item) => write!(f, "{}", item),
        }
    }
}
impl<'r> SyncMessageUnionReader<'r> {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            SyncMessageUnionReader::L2Transaction(ref item) => write!(f, "{}", item),
            SyncMessageUnionReader::WithdrawalRequestExtra(ref item) => write!(f, "{}", item),
            SyncMessageUnionReader::RemoveRequest(ref item) => write!(f, "{}", item),
        }
    }
}
impl ::core::convert::From<L2Transaction> for SyncMessageUnion {
    fn from(item: L2Transaction) -> Self {
        SyncMessageUnion::L2Transaction(item)
    }
}
impl ::core::convert::From<WithdrawalRequestExtra> for SyncMessageUnion {
    fn from(item: WithdrawalRequestExtra) -> Self {
        SyncMessageUnion::WithdrawalRequestExtra(item)
    }
}
impl ::core::convert::From<RemoveRequest> for SyncMessageUnion {
    fn from(item: RemoveRequest) -> Self {
        SyncMessageUnion::RemoveRequest(item)
    }
}
impl<'r> ::core::convert::From<L2TransactionReader<'r>> for SyncMessageUnionReader<'r> {
    fn from(item: L2TransactionReader<'r>) -> Self {
        SyncMessageUnionReader::L2Transaction(item)
    }
}
impl<'r> ::core::convert::From<WithdrawalRequestExtraReader<'r>> for SyncMessageUnionReader<'r> {
    fn from(item: WithdrawalRequestExtraReader<'r>) -> Self {
        SyncMessageUnionReader::WithdrawalRequestExtra(item)
    }
}
impl<'r> ::core::convert::From<RemoveRequestReader<'r>> for SyncMessageUnionReader<'r> {
    fn from(item: RemoveRequestReader<'r>) -> Self {
        SyncMessageUnionReader::RemoveRequest(item)
    }
}
impl SyncMessageUnion {
    pub const NAME: &'static str = "SyncMessageUnion";
    pub fn as_bytes(&self) -> molecule::bytes::Bytes {
        match self {
            SyncMessageUnion::L2Transaction(item) => item.as_bytes(),
            SyncMessageUnion::WithdrawalRequestExtra(item) => item.as_bytes(),
            SyncMessageUnion::RemoveRequest(item) => item.as_bytes(),
        }
    }
    pub fn as_slice(&self) -> &[u8] {
        match self {
            SyncMessageUnion::L2Transaction(item) => item.as_slice(),
            SyncMessageUnion::WithdrawalRequestExtra(item) => item.as_slice(),
            SyncMessageUnion::RemoveRequest(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            SyncMessageUnion::L2Transaction(_) => 0,
            SyncMessageUnion::WithdrawalRequestExtra(_) => 1,
            SyncMessageUnion::RemoveRequest(_) => 2,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            SyncMessageUnion::L2Transaction(_) => "L2Transaction",
            SyncMessageUnion::WithdrawalRequestExtra(_) => "WithdrawalRequestExtra",
            SyncMessageUnion::RemoveRequest(_) => "RemoveRequest",
        }
    }
    pub fn as_reader<'r>(&'r self) -> SyncMessageUnionReader<'r> {
        match self {
            SyncMessageUnion::L2Transaction(item) => item.as_reader().into(),
            SyncMessageUnion::WithdrawalRequestExtra(item) => item.as_reader().into(),
            SyncMessageUnion::RemoveRequest(item) => item.as_reader().into(),
        }
    }
}
impl<'r> SyncMessageUnionReader<'r> {
    pub const NAME: &'r str = "SyncMessageUnionReader";
    pub fn as_slice(&self) -> &'r [u8] {
        match self {
            SyncMessageUnionReader::L2Transaction(item) => item.as_slice(),
            SyncMessageUnionReader::WithdrawalRequestExtra(item) => item.as_slice(),
            SyncMessageUnionReader::RemoveRequest(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            SyncMessageUnionReader::L2Transaction(_) => 0,
            SyncMessageUnionReader::WithdrawalRequestExtra(_) => 1,
            SyncMessageUnionReader::RemoveRequest(_) => 2,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            SyncMessageUnionReader::L2Transaction(_) => "L2Transaction",
            SyncMessageUnionReader::WithdrawalRequestExtra(_) => "WithdrawalRequestExtra",
            SyncMessageUnionReader::RemoveRequest(_) => "RemoveRequest",
        }
    }
}
#[derive(Clone)]
pub struct RemoveRequest(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for RemoveRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for RemoveRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for RemoveRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "hash", self.hash())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for RemoveRequest {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ];
        RemoveRequest::new_unchecked(v.into())
    }
}
impl RemoveRequest {
    pub const TOTAL_SIZE: usize = 32;
    pub const FIELD_SIZES: [usize; 1] = [32];
    pub const FIELD_COUNT: usize = 1;
    pub fn hash(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0..32))
    }
    pub fn as_reader<'r>(&'r self) -> RemoveRequestReader<'r> {
        RemoveRequestReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for RemoveRequest {
    type Builder = RemoveRequestBuilder;
    const NAME: &'static str = "RemoveRequest";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        RemoveRequest(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        RemoveRequestReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        RemoveRequestReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().hash(self.hash())
    }
}
#[derive(Clone, Copy)]
pub struct RemoveRequestReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for RemoveRequestReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for RemoveRequestReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for RemoveRequestReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "hash", self.hash())?;
        write!(f, " }}")
    }
}
impl<'r> RemoveRequestReader<'r> {
    pub const TOTAL_SIZE: usize = 32;
    pub const FIELD_SIZES: [usize; 1] = [32];
    pub const FIELD_COUNT: usize = 1;
    pub fn hash(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }
}
impl<'r> molecule::prelude::Reader<'r> for RemoveRequestReader<'r> {
    type Entity = RemoveRequest;
    const NAME: &'static str = "RemoveRequestReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        RemoveRequestReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct RemoveRequestBuilder {
    pub(crate) hash: Byte32,
}
impl RemoveRequestBuilder {
    pub const TOTAL_SIZE: usize = 32;
    pub const FIELD_SIZES: [usize; 1] = [32];
    pub const FIELD_COUNT: usize = 1;
    pub fn hash(mut self, v: Byte32) -> Self {
        self.hash = v;
        self
    }
}
impl molecule::prelude::Builder for RemoveRequestBuilder {
    type Entity = RemoveRequest;
    const NAME: &'static str = "RemoveRequestBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.hash.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        RemoveRequest::new_unchecked(inner.into())
    }
}
